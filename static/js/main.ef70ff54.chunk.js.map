{"version":3,"sources":["queries/index.js","components/ImageLazy/index.jsx","components/Character/index.jsx","context/index.js","components/Filters/components/Modal/index.jsx","components/Filters/index.jsx","components/Loader/index.jsx","context/actions.js","utils/index.js","components/Characters/index.jsx","context/reducer.js","App.js","reportWebVitals.js","api.js","index.js"],"names":["GET_CHARACTERS","gql","ImageLazy","src","alt","className","delayTime","effect","Character","character","name","status","species","origin","dimension","image","globalState","filters","GlobalContext","createContext","useGlobalValue","useContext","FILTER_NAME","FILTER_SPECIES","ModalFilter","handleSubmitSearch","handleOnChangeName","handleOnChangeSpecies","useState","isOpen","setOpenModal","state","onClick","onRequestClose","ariaHideApp","onSubmit","event","filterName","target","value","filterSpecie","preventDefault","handleOnSubmit","type","id","defaultValue","placeholder","Search","handleOnClick","filterBy","filteByWithText","Object","values","reduce","accum","elem","i","Modal","Loader","size","color","loading","actions","actionsArray","some","actionName","Error","Immutable","asObject","stringArrayToObject","actionCreators","SET_FILTERS","payload","Characters","dispatch","page","setPage","items","setItems","useQuery","variables","filter","data","useEffect","characters","results","oldData","Filters","dataLength","length","next","hasMore","info","pages","loader","map","globalReducer","action","CHANGE_FILTERS","merge","CLEAN_FILTERS","App","Provider","useReducer","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","ApolloProvider","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ef70ff54.chunk.js","sourcesContent":["import {\n    gql\n} from '@apollo/client';\n\nexport const GET_CHARACTERS = gql `\n  query getCharacters($page: Int!, $filter: FilterCharacter!) {\n    characters(page: $page, filter: $filter) {\n      results {\n        id\n        name\n        status\n        type\n        species\n        image\n        origin {\n          name\n          dimension\n        }\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\nimport 'react-lazy-load-image-component/src/effects/blur.css';\n \nconst ImageLazy = ({ src, alt, className, delayTime }) => (\n  <LazyLoadImage\n    alt={alt}\n    effect=\"blur\"\n    src={src}\n    className={className}\n    delayTime={delayTime}\n    />\n);\n\nexport default ImageLazy;\n","import React, { Fragment } from 'react';\n\nimport ImageLazy from '../ImageLazy'\nimport './styles.css'\n\nconst Character = ({ character }) => {\n    return (\n        <div className=\"container-character\">\n            <div className=\"container-card\">\n                {character && (\n                    <Fragment>\n                        <div className=\"container-name\">\n                            <h2 className=\"name\">{character.name}</h2>\n                        </div>\n                        <div className=\"container-body\">\n                            <span className=\"item\"><b>Status: </b>{character.status}</span>\n                            <span className=\"item\"><b>Specie: </b>{character.species}</span>\n                            <span className=\"item\"><b>Origin: </b>{character.origin.name}</span>\n                            <span className=\"item\"><b>Dimension: </b>{character.origin.dimension || 'unknown'}</span>\n                        </div>\n                        <ImageLazy className=\"picture\"  src={character.image} alt=\"character\" delayTime=\"0\" />\n                    </Fragment>\n                )}\n            </div>\n        </div>\n    )\n}\n\nexport default Character\n","import { createContext, useContext } from \"react\";\n\nexport const globalState = {\n  filters: null\n};\n\nexport const GlobalContext = createContext();\n\nexport const useGlobalValue = () => useContext(GlobalContext);\n","import React, { Fragment, useState } from 'react';\nimport ReactModal from 'react-modal';\n\nimport { useGlobalValue } from '../../../../context'\n\nconst FILTER_NAME = 'name';\nconst FILTER_SPECIES = 'species';\n\nconst ModalFilter = ({  handleSubmitSearch, handleOnChangeName, handleOnChangeSpecies }) => {\n    const [isOpen, setOpenModal] = useState(false)\n    const [ state, dispatch ] = useGlobalValue()\n\n    const handleOnSubmit = (event) => {\n        const filterName = event.target[FILTER_NAME].value;\n        const filterSpecie = event.target[FILTER_SPECIES].value;\n        handleSubmitSearch({ name: filterName, species: filterSpecie })\n        setOpenModal(false)\n        event.preventDefault()\n    }\n\n    return (\n        <Fragment>\n            <button className=\"buttonFilter\" onClick={() => setOpenModal(true)}>Filters</button>\n            <ReactModal \n                isOpen={isOpen}\n                onRequestClose={() => setOpenModal(false)}\n                ariaHideApp={false}\n            >\n                <div>\n                    <form\n                        onSubmit={event => handleOnSubmit(event)}\n                        className=\"searchForm\"\n                    >   \n                        <div className=\"containerModal\">\n                            <h1 className=\"title\">Apply Filters</h1>\n                            <input\n                                type=\"text\"\n                                id={FILTER_NAME}\n                                defaultValue={state.filters && state.filters.name}\n                                placeholder=\"Search by Name...\"\n                                className=\"field\"\n                            />\n                            <input\n                                type=\"text\"\n                                id={FILTER_SPECIES}\n                                defaultValue={state.filters && state.filters.species}\n                                placeholder=\"Search by Species\"\n                                className=\"field\"\n                            />\n                        </div>\n                        <button className=\"buttonFilter\" type=\"submit\">Apply</button>\n                    </form> \n                </div>\n            </ReactModal>\n        </Fragment>\n    )\n}\n\nexport default ModalFilter\n","import React from 'react'\n\nimport ModalFilters from './components/Modal'\nimport './styles.css'\n\nconst Search = ({\n  handleOnClick,\n  filterBy\n}) => {\n\n  const handleSubmitSearch = (filters) => {\n    handleOnClick({ filters: filters })\n  }\n\n  const handleOnChangeSpecies = (value) => {\n\n  }\n\n  const filteByWithText = filterBy && Object.values(filterBy).reduce((accum, elem, i) => elem !== '' ? [...accum, ` ${elem} `] : accum,[]);\n\n  return (\n    <div className=\"containerFilters\">\n      <div className=\"filters\">\n        {filteByWithText && <span className=\"text\">Filtrando por:</span>}\n        <span className=\"filterBy\">{filteByWithText}</span>\n      </div>\n      <ModalFilters handleOnChangeSpecies={handleOnChangeSpecies} handleSubmitSearch={handleSubmitSearch} filterBy={filterBy} />\n    </div>\n  )\n}\n\nexport default Search","import React from \"react\"\nimport BeatLoader from \"react-spinners/BeatLoader\";\n\nimport './styles.css'\n\nconst Loader = ({ size, color, loading = true }) => {\n    return (\n        <div className=\"container-loader\">\n            <BeatLoader color={color} loading={loading} size={size} />\n        </div>\n    )\n}\n\nexport default Loader\n","import { stringArrayToObject } from '../utils';\n\nexport const actions = stringArrayToObject(\n  ['CLEAN_FILTERS', 'SET_FILTERS', 'CHANGE_FILTER']\n);\n\nexport const actionCreators = {\n  cleanFilters: () => ({ type: actions.CLEAN_FILTERS }),\n  setFilters: filters => ({ type: actions.SET_FILTERS, payload: filters }),\n  changeFilters: ({ value, key }) => ({ type: actions.CHANGE_FILTER, payload: { value, key }})\n};\n","import Immutable from 'seamless-immutable';\n\n/**\n * Receives an array of strings, and returns an obj with that strings as properties with that string as value.\n * E.G:\n * stringArrayToObject(['A', 'B', 'C']) // { A: 'A', B: 'B', C: 'C' }\n * @param {array} actionsArray array of values\n * @param {string} namespace prefix for the resulting values\n * @returns {object} (['A', 'B', 'C', 'name']) -> { A: '@name/A', B: '@name/B', C: '@name/C' }\n */\nexport function stringArrayToObject(actionsArray, namespace = '') {\n  if (actionsArray.some(actionName => !actionName || typeof actionName !== 'string'))\n    throw new Error('Action names must be strings and must not be empty');\n\n  return new Immutable(actionsArray).asObject(actionName => [actionName, `${actionName}`]);\n}\n\n/**\n * Receives a length, and returns a new Array with indices on each position.\n * E. G:\n * arrayOfIndices(3) // [0, 1, 2]\n * This is for a reason: avoiding the use of for loops.\n * @param {number} length length of the array\n * @returns {array} [0, ..., length]\n *\n * @see https://github.com/airbnb/javascript#iterators--nope\n */\nexport function arrayOfIndices(length) {\n  // .fill(<something not undefined>) is required for map, map ignore undefined indexes\n  return Array(length)\n    .fill(null)\n    .map((_, index) => index);\n}\n","import React, { useState, useEffect } from 'react';\nimport { useQuery } from '@apollo/client';\nimport InfiniteScroll from \"react-infinite-scroll-component\";\n\nimport { GET_CHARACTERS } from '../../queries';\nimport Character from '../Character'\nimport Filters from '../Filters'\nimport Loader from '../Loader'\nimport { useGlobalValue } from '../../context'\nimport { actionCreators } from '../../context/actions'\n\nimport './styles.css'\n\nconst Characters = () => {\n    const [state, dispatch] = useGlobalValue();\n    const [ page, setPage ] = useState(1)\n    const [ items, setItems ] = useState([])\n    const { data, loading } = useQuery(GET_CHARACTERS, { variables: { page: page, filter: { ...state.filters }}}); \n\n    useEffect(() => {\n        if (data && data.characters.results) {\n            setItems(oldData => [...oldData, ...data.characters.results]);\n        }\n    }, [ data ])\n\n    const hasMore = () => {\n        if (data && (page < data.characters.info.pages)) {\n            return true\n        }\n        return false\n    }\n\n    const handleOnClick = ({ filters }) => {\n        dispatch(actionCreators.setFilters(filters))\n        setItems([])\n        setPage(1)\n    }\n    \n    return (\n        <div className=\"container-general\">\n            <h2 className=\"title\">Characters of Ricky and Morty</h2>\n            <Filters handleOnClick={handleOnClick} filterBy={state.filters} />\n            {items && (\n                <InfiniteScroll\n                    dataLength={items.length}\n                    next={() => setPage(page + 1)}\n                    hasMore={hasMore}\n                    loader={<Loader size={30} color=\"gray\" loading={loading} />}\n                >\n                    <div className=\"container-characters\">\n                        {items.map(elem =>\n                            <Character key={`${elem.id}-${elem.name}`} character={elem} />\n                        )}\n                    </div>\n                </InfiniteScroll>\n            )}\n            {items && items.length === 0 && !loading && <span className=\"messageNoResults\">Ups !! Try again !</span>}\n        </div>\n    )\n}\n\nexport default Characters\n","import { actions } from './actions'\n\nexport const globalReducer = (state, action) => {\n    switch (action.type) {\n      case actions.SET_FILTERS: {\n        return {\n          ...state,\n          filters: action.payload\n        };\n      }\n      case actions.CHANGE_FILTERS: {\n        return {\n          ...state,\n          filters: state.filters.merge(action.payload)\n        };\n      }\n      case actions.CLEAN_FILTERS: {\n        return {\n          ...state,\n          filters: []\n        };\n      }\n    default:\n      return state;\n    }\n  };\n","import {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport { useReducer } from 'react';\nimport './App.css';\nimport Characters from './components/Characters'\nimport { GlobalContext, globalState } from './context'\nimport  { globalReducer } from './context/reducer'\n\nfunction App() {\n  return (  \n    <GlobalContext.Provider value={useReducer(globalReducer, globalState)} >\n      <Router>\n        <Switch>\n          <Route path=\"/characters\" component={Characters} />\n        </Switch>\n      </Router>\n  </GlobalContext.Provider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\n    ApolloClient,\n    InMemoryCache\n  } from \"@apollo/client\";\n\nexport const client = new ApolloClient({\n    uri: 'https://rickandmortyapi.com/graphql',\n    cache: new InMemoryCache()\n  });\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  ApolloProvider,\n} from \"@apollo/client\";\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { client } from './api';\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}